using System.Text;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InlineQueryResults;

namespace fiitobot.Services;

public interface IPresenter
{
    Task ShowContact(Contact contact, long chatId);
    Task SayHasMoreResults(int moreResultsCount, long chatId);
    Task SayNoResults(long chatId);
    Task SayNoRights(long chatId);
    Task InlineSearchResults(string inlineQueryId, Contact[] foundContacts);
    Task ShowDetails(Detail[] contactDetails, long fromChatId);
    Task SayReloaded(long chatId);
    Task ShowErrorToDevops(Update incomingUpdate, string errorMessage);
}

public class Presenter : IPresenter
{
    private readonly ITelegramBotClient botClient;
    private readonly long devopsChatId;

    public Presenter(ITelegramBotClient botClient, IConfiguration config)
    {
        this.botClient = botClient;
        devopsChatId = config.GetValue<long>("DevopsChatId");
    }

    public async Task InlineSearchResults(string inlineQueryId, Contact[] foundContacts)
    {
        var results = foundContacts.Select(c => 
            new InlineQueryResultArticle(c.GetHashCode().ToString(), $"{c.LastName} {c.FirstName} {c.Patronymic}", 
                new InputTextMessageContent(FormatContactAsHtml(c))
                {
                    ParseMode = ParseMode.Html
                }));
        await botClient.AnswerInlineQueryAsync(inlineQueryId, results, 60);
    }

    public async Task ShowDetails(Detail[] contactDetails, long chatId)
    {
        var text = new StringBuilder();
        foreach (var rubric in contactDetails.GroupBy(d => d.Rubric))
        {
            text.AppendLine($"<b>{EscapeForHtml(rubric.Key)}</b> (<a href=\"{rubric.First().SourceUrl}\">–∏—Å—Ç–æ—á–Ω–∏–∫</a>)");
            foreach (var detail in rubric)
                text.AppendLine($" ‚Ä¢ {EscapeForHtml(detail.Parameter)}: {EscapeForHtml(detail.Value)}");
        }
        await botClient.SendTextMessageAsync(chatId, text.ToString(), ParseMode.Html);
    }

    public async Task SayReloaded(long chatId)
    {
        await botClient.SendTextMessageAsync(chatId, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª!", ParseMode.Html);
    }

    public async Task ShowErrorToDevops(Update incomingUpdate, string errorMessage)
    {
        await botClient.SendTextMessageAsync(devopsChatId, FormatErrorHtml(incomingUpdate, errorMessage), ParseMode.Html);
    }

    private string FormatErrorHtml(Update incomingUpdate, string errorMessage)
    {
        var incoming = incomingUpdate.Type switch
        {
            UpdateType.Message => $"From: {incomingUpdate.Message!.From} Message: {incomingUpdate.Message!.Text}",
            UpdateType.EditedMessage => $"From: {incomingUpdate.EditedMessage!.From} Message: {incomingUpdate.EditedMessage!.Text}",
            UpdateType.InlineQuery => $"From: {incomingUpdate.InlineQuery!.From} Query: {incomingUpdate.InlineQuery!.Query}",
            _ => $"Message with type {incomingUpdate.Type}"
        };

        return $"Error handling message: <pre>{EscapeForHtml(incoming)}</pre>\n\nError:\n<pre>{EscapeForHtml(errorMessage)}</pre>";
    }

    private string EscapeForHtml(string text)
    {
        return text
            .Replace("&", "&amp;")
            .Replace("<", "&lt;")
            .Replace(">", "&gt;");
    }

    public async Task ShowContact(Contact contact, long chatId)
    {
        await botClient.SendTextMessageAsync(chatId, FormatContactAsHtml(contact), ParseMode.Html);
    }

    public async Task SayHasMoreResults(int moreResultsCount, long chatId)
    {
        await botClient.SendTextMessageAsync(chatId, $"–ï—Å—Ç—å –µ—â—ë {moreResultsCount.Pluralize("–ø–æ–¥—Ö–æ–¥—è—â–∏–π —á–µ–ª–æ–≤–µ–∫", "–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–ª–æ–≤–µ–∫–∞", "–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–ª–æ–≤–µ–∫")}", ParseMode.Html);
    }

    public async Task SayNoResults(long chatId)
    {
        await botClient.SendTextMessageAsync(chatId, $"–ù–µ –Ω–∞—à–µ–ª –Ω–∏–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ", ParseMode.Html);
    }

    public async Task SayNoRights(long chatId)
    {
        await botClient.SendTextMessageAsync(chatId, $"–≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –§–ò–ò–¢", ParseMode.Html);
    }

    public string FormatContactAsHtml(Contact contact)
    {
        return $@"<b>{contact.LastName} {contact.FirstName} {contact.Patronymic}</b>
{contact.FormatMnemonicGroup(DateTime.Now)} (–≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {contact.AdmissionYear})
üè´ –®–∫–æ–ª–∞: {contact.School}
üèôÔ∏è –ì–æ—Ä–æ–¥: {contact.City}
–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ {FormatConcurs(contact.Concurs)} c —Ä–µ–π—Ç–∏–Ω–≥–æ–º {contact.Rating}

üìß {contact.Email}
üìû {contact.Phone}
üí¨ {contact.Telegram}
{EscapeForHtml(contact.Note)}";
    }

    private string FormatConcurs(string concurs)
    {
        if (concurs == "–û") return "–ø–æ –æ–±—â–µ–º—É –∫–æ–Ω–∫—É—Ä—Å—É";
        else if (concurs == "–ë–≠") return "–ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ";
        else if (concurs == "–ö") return "–ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É";
        else if (concurs == "–ö–í") return "–ø–æ –ª—å–≥–æ—Ç–Ω–æ–π –∫–≤–æ—Ç–µ";
        else if (concurs == "–¶") return "–ø–æ —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç–µ";
        else return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫ ü§∑‚Äç";
    }


}